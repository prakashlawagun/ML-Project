# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import svm

diabetes_data = pd.read_csv('/content/diabetes.csv')

diabetes_data.head()

diabetes_data.shape

diabetes_data.describe()

diabetes_data["Outcome"].value_counts()

diabetes_data.isnull().sum()

X = diabetes_data.drop(columns='Outcome',axis=1)
Y = diabetes_data["Outcome"]

print(X)

print(Y)

scaler = StandardScaler()

scaler.fit(X)
standard_data = scaler.transform(X)

print(standard_data)

X= standard_data
Y = diabetes_data["Outcome"]

print(X)
print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

# training the SVM classifier
classifier.fit(X_train,Y_train)

"""Evaluation the model"""

#finding the accuray score
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Accuray on the training data: ",training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("Accuracy on testing data: ",testing_data_accuracy)

"""Making the Prediction system"""

input_data = (1,89,66,23,94,28.1,0.167,21)
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
#standardize the input data
std_data = scaler.transform(input_data_reshaped)


prediction = classifier.predict(std_data)

if(prediction[0] == 0 ):
  print("Person is not Diabetes")
else:
  print("Person is diabetes")

